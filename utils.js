require('dotenv').config();
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { query } = require('./db');

// Funci칩n para resetear cumplea침os anunciados
async function resetAnnouncedBirthdays(client) {
  try {
    for (const guild of client.guilds.cache.values()) {
      await query('UPDATE birthdays SET announced = FALSE WHERE guild_id = $1', [guild.id]);
      console.log(`Cumplea침os reseteados en el servidor ${guild.id}`);
    }
  } catch (error) {
    console.error('Error al resetear cumplea침os:', error);
  }
}

// Funci칩n para verificar cumplea침os
async function checkBirthdays(client) {
  // Depuraci칩n: muestra el estado del cliente
  console.log(`Ejecutando checkBirthdays con el cliente: ${client}`);
  console.log('Guilds disponibles:', client.guilds.cache.map(guild => guild.name));
  if (!client) throw new Error('Client no fue proporcionado.');

  // Verificaci칩n del cliente y sus guilds
  if (!client || !client.guilds || !client.guilds.cache || !client.guilds.cache.size) {
    console.error('Cliente no disponible o guilds indefinido.');
    return; // Salir si no hay guilds disponibles
  }

  const currentDate = new Date();
  const currentDay = currentDate.getDate();
  const currentMonth = currentDate.getMonth() + 1;

  // Recorrer cada guild disponible
  for (const guild of client.guilds.cache.values()) {
    try {
      // Consulta para obtener el canal de cumplea침os
      const { rows: configRows } = await query(
        'SELECT birthday_channel_id FROM config WHERE guild_id = $1',
        [guild.id]
      );
      if (configRows.length === 0) continue;

      const birthdayChannelId = configRows[0].birthday_channel_id;
      const birthdayChannel = guild.channels.cache.get(birthdayChannelId);
      if (!birthdayChannel) {
        console.warn(`Canal de cumplea침os no encontrado para el guild: ${guild.name}`);
        continue;
      }

      // Consulta para obtener los cumplea침os de hoy
      const { rows: birthdaysToday } = await query(
        'SELECT user_id FROM birthdays WHERE guild_id = $1 AND day = $2 AND month = $3 AND announced = FALSE',
        [guild.id, currentDay, currentMonth]
      );

      // Enviar mensaje para cada cumplea침os encontrado
      for (const { user_id } of birthdaysToday) {
        const user = guild.members.cache.get(user_id);
        const name = user ? `<@${user_id}>` : `ID: ${user_id}`;

        const birthdayImages = [
          // ... im치genes
        ];
        const randomImage = birthdayImages[Math.floor(Math.random() * birthdayImages.length)];

        const birthdayEmbed = new EmbedBuilder()
          .setTitle(`춰Hoy es el cumplea침os de **${name}**!`)
          .setDescription('游꾸 Aseg칰rate de desearle un excelente d칤a y darle un fuerte abrazo.')
          .setColor(0x00FF00)
          .setThumbnail('https://i.ibb.co/XDF8Tqc/cake.gif')
          .setImage(randomImage)
          .setFooter({ text: '춰Felicidades!, Te quiere Cler!' })
          .setTimestamp();

        try {
          await birthdayChannel.send({ embeds: [birthdayEmbed] });
          await query(
            'UPDATE birthdays SET announced = TRUE WHERE guild_id = $1 AND user_id = $2',
            [guild.id, user_id]
          );
        } catch (sendError) {
          console.error(`Error al enviar mensaje en ${guild.id}:`, sendError);
        }
      }
    } catch (error) {
      console.error(`Error al verificar cumplea침os en ${guild.id}:`, error);
    }
  }
}


// Exportar todas las funciones
module.exports = {
  resetAnnouncedBirthdays,
  checkBirthdays,
};